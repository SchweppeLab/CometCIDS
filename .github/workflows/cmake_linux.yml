name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Make folder
      run: mkdir ./comet-ms/build
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      working-directory: ./comet-ms
      
    - name: Install Eigen and boost
      run: |
        sudo apt install libeigen3-dev libboost-all-dev
          
    - name: Link Eigen
      run: |
        cd /usr/local/include
        sudo ln -sf eigen3/Eigen Eigen
        sudo ln -sf eigen3/unsupported unsupported
        
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ./build --config ${{env.BUILD_TYPE}}
      working-directory: ./comet-ms
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: v0.1.${{ github.run_id }}.${{ github.run_number }}
          release_name: CometCIDS Win CLI v0.1.${{ github.run_id }}.${{ github.run_number }}
          body: ""
          draft: true
          prerelease: true

    - name: Compress CLI # This would actually build your project, using zip for an example artifact
      working-directory: ./comet-ms
      run: tar czvf ../CometCIDS.tar.gz ./build
      
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./CometCIDS.zip
          asset_name: CoemtCIDS.zip
          asset_content_type: application/zip
      

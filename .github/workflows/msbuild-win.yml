name: Comet-Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest] 
        targetplatform: [x86, x64]
        compiler: [gcc, clang]
        exclude:
          # Only default compiler on macos-latest and windows-latest
          - os: macos-latest
            compiler: clang
          - os: windows-latest
            compiler: clang
    name: Run MSBuild
    env:
      buildDir: '${{ github.workspace }}/build'

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vswhere-path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin'

    - name: Install boost
      uses: MarkusJx/install-boost@v1.0.1
      id: install-boost
      with:
        # REQUIRED: Specify the required boost version
        # A list of supported versions can be found here: 
        # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
        boost_version: 1.73.0
        # OPTIONAL: Specify a toolset on windows
        # toolset: msvc14.2
        # OPTIONAL: Specify a custon install location
        # boost_install_dir: C:\some_directory

    - name: Install dependencies
      uses: jrl-umi3218/github-actions/install-dependencies@master
      # from: https://github.com/jrl-umi3218/eigen-quadprog/blob/master/.github/workflows/build.yml
      with:
        compiler: ${{ matrix.compiler }}
        build-type: ${{ matrix.build-type }}
        windows: |
          github:
            - path: eigenteam/eigen-git-mirror
              ref: 3.3.7

    - name: Build and test
      uses: jrl-umi3218/github-actions/build-cmake-project@master
      with:
        compiler: ${{ matrix.compiler }}
        build-type: ${{ matrix.build-type }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: v0.1.${{ github.run_id }}.${{ github.run_number }}
          release_name: CometCIDS Win CLI v0.1.${{ github.run_id }}.${{ github.run_number }}
          body: ""
          draft: true
          prerelease: true

    - name: Zip CLI # This would actually build your project, using zip for an example artifact
      run: Compress-Archive -Path ${{ env.buildDir }} -DestinationPath ../CometCIDS.zip

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./CometCIDS.zip
          asset_name: CometCIDS.zip
          asset_content_type: application/zip
